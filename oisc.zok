// TODO: make this using fields instead of u32

const u32 MEMORY_SIZE = 64
const u32 OUTPUT_SIZE = 16
// The hardcoded execution step limit
const u32 STEP_LIMIT = 64

struct Memory {
	u32[MEMORY_SIZE] values
}

struct State {
	Memory memory
	u32 pc
	bool running
	u32[OUTPUT_SIZE] output
	u32 output_len
}

// The readmem/writemem helpers are needed partially because zokrates has 
// out-of-bounds checks. Perhaps we could rewrite the code to avoid the need for them.

def readmem(State s, u32 pos) -> u32:
	return if (pos > MEMORY_SIZE) then 0 else s.memory.values[pos] fi

// If strict is false, this will silently allow OOB writes.
// i.e. strict is false within a syscall
//
// TODO: Is there a nicer way to implement this?
def writemem(State s, bool strict, u32 pos, u32 val) -> State:
	bool would_fail = pos > MEMORY_SIZE
	bool avoid_fail = !strict && would_fail
	pos = if avoid_fail then 0 else pos fi
	s.memory.values[pos] = if avoid_fail then s.memory.values[pos] else val fi
	return s

def main(Memory init) -> State:
	State s = State {
		memory: init,
		pc: 0,
		running: true,
		output: [0; OUTPUT_SIZE],
		output_len: 0,
	}

	// TODO: rewrite into functions to avoid all the duplicate `if s.runnning` checks
	for u32 step in 0..STEP_LIMIT do
		// Note, due to checking s.running in every state modifying part,
		// the below code will keep "applying" the same last step from
		// the point it has been stopped, until STEP_LIMIT.

		u32 a = readmem(s, s.pc)
		u32 b = readmem(s, s.pc + 1)
		u32 c = readmem(s, s.pc + 2)

		// This is the special case
		bool syscall = (a == 4294967295)
		// stop() syscall
		bool is_stop = syscall && c == 0
		s.running = !is_stop
		// put() syscall
		bool is_put = syscall && c == 1
		s.output[s.output_len] = readmem(s, b)
		s.output_len = if (s.running && is_put) then (s.output_len + 1) else s.output_len fi

		// This is the regular codepath
		bool is_jump = !syscall && (readmem(s, a) <= readmem(s, b))
		bool is_move = !syscall
		u32 a_prime = if (s.running && is_move) then (readmem(s, a) - readmem(s, b)) else readmem(s, a) fi
		s = writemem(s, !syscall, a, a_prime)

		u32 new_pc = if is_jump then c else (s.pc + 3) fi
		s.pc = if s.running then new_pc else s.pc fi
	endfor

	return s
